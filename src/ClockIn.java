import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.FileReader;
import java.text.ParseException;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.*;
import java.text.*;
import java.util.Date;
import java.text.DateFormat;

public class ClockIn extends javax.swing.JFrame {
    private DateFormat defaultDate = DateFormat.getDateTimeInstance();
    private boolean clockedIn = false;

    public ClockIn() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        textID = new javax.swing.JTextField();
        textFirst = new javax.swing.JTextField();
        textLast = new javax.swing.JTextField();
        butGetCurrentTime = new javax.swing.JButton();
        butClockIn = new javax.swing.JButton();
        butClockOut = new javax.swing.JButton();
        butClear = new javax.swing.JButton();
        butExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Date and Time :");

        jLabel2.setText("Deliveryman ID :");

        jLabel3.setText("First Name :");

        jLabel4.setText("Last Name :");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        butGetCurrentTime.setText("Get Current Time");
        butGetCurrentTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGetCurrentTimeActionPerformed(evt);
            }
        });

        butClockIn.setText("Clock In");
        butClockIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butClockInActionPerformed(evt);
            }
        });

        butClockOut.setText("Clock Out");
        butClockOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butClockOutActionPerformed(evt);
            }
        });

        butClear.setText("Clear");
        butClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butClearActionPerformed(evt);
            }
        });

        butExit.setText("Exit");
        butExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExitActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(butClockIn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textID, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textLast, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(butClockOut)
                                        .addGap(50, 50, 50)
                                        .addComponent(butClear)))
                                .addGap(49, 49, 49)
                                .addComponent(butExit))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(butGetCurrentTime)))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butGetCurrentTime))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butClockIn)
                    .addComponent(butClockOut)
                    .addComponent(butClear)
                    .addComponent(butExit))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String getCurrentTime(){
        Date now = new Date();
        String nowString = defaultDate.format(now);
        return nowString;
    }
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void butClockInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butClockInActionPerformed
        String firstName = textFirst.getText();
        String lastName = textFirst.getText();
        String deliveryManID = textID.getText();
        String dateTime = jTextField1.getText().trim();
        if (dateTime.length()==0){
            JOptionPane.showMessageDialog(this, "You must enter a date and time.");
        }
        try{
            defaultDate.parse(dateTime);
        }
        catch (ParseException e){
            JOptionPane.showMessageDialog(this, "The date and time is invalid.");
        }
        textArea.setText("ID: " + deliveryManID +", First name: " + firstName +", Last name: " + lastName + " clocked in at " + dateTime);
        clockedIn=true;
    }//GEN-LAST:event_butClockInActionPerformed

    private void butGetCurrentTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGetCurrentTimeActionPerformed
        Date now = new Date();
        DateFormat defaultDate = DateFormat.getDateTimeInstance();
        String nowString = defaultDate.format(now);
        jTextField1.setText(nowString);
    }//GEN-LAST:event_butGetCurrentTimeActionPerformed

    private void butClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butClearActionPerformed
        textID.setText("");
        textFirst.setText("");
        textLast.setText("");
    }//GEN-LAST:event_butClearActionPerformed

    private void butExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_butExitActionPerformed

    private void butClockOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butClockOutActionPerformed
        String firstName = textFirst.getText();
        String lastName = textLast.getText();
        String deliveryManID = textID.getText();
        
        if(!clockedIn){
            JOptionPane.showMessageDialog(this, "You should clock in first.");
            return ;
        }
        String dateTime = jTextField1.getText().trim();
        textArea.setText("");
        if(dateTime.length()==0){
            JOptionPane.showMessageDialog(this, "You should enter a date and time.");
        }
        try{
            defaultDate.parse(dateTime);
        }catch (ParseException e){
            JOptionPane.showMessageDialog(this, "The date and time is invalid.");
        }
        readTimeclock(dateTime);
        
        textArea.setText("ID: " + deliveryManID +", First name: " + firstName +", Last name: " + lastName + " clocked out at " + dateTime);
        saveTimeclock(dateTime, deliveryManID, firstName, lastName);
        clockedIn=true;
    }//GEN-LAST:event_butClockOutActionPerformed
    
    private boolean saveTimeclock (String dateTime, String deliveryManID, String firstName, String lastName){
    try{
        FileWriter fileWritter = new FileWriter("timeclock.txt", true);
        BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
        bufferWritter.write(dateTime+"," +deliveryManID+"," +firstName+ ","+lastName+"\n");
        bufferWritter.close();
        return true;
    }catch (IOException e) {
        e.printStackTrace();
        return false;
    }
    }
    
    private void readTimeclock (String dateTime){
        try{
            BufferedReader bufRead = new BufferedReader(new FileReader("timeclock.txt"));
            String record;
            String dateStr;
            boolean recordFounded=false;
            while ((record = bufRead.readLine())!=null){
                String[] values=record.split(",");
                dateStr=values[0]+","+values[1];
                Date date=defaultDate.parse(dateStr);
                if(dateTime.equals(dateStr)){
                    textArea.setText("ID:" + values[2] +", First name:" +values[3] +", Last name:"+ values[4] + "clocked out at" + dateTime);
                    recordFounded=true;
                    break;
                }
            }
            bufRead.close();
            if(!recordFounded){
                JOptionPane.showMessageDialog(this, "The record does not exist.");
            }
        }catch(Exception e){
            e.printStackTrace();
            
        }
    }
    
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClockIn form = new ClockIn();
                form.setVisible(true);
                form.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butClear;
    private javax.swing.JButton butClockIn;
    private javax.swing.JButton butClockOut;
    private javax.swing.JButton butExit;
    private javax.swing.JButton butGetCurrentTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textFirst;
    private javax.swing.JTextField textID;
    private javax.swing.JTextField textLast;
    // End of variables declaration//GEN-END:variables
}
